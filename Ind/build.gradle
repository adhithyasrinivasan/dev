buildscript {
    ext { springBootVersion = '1.4.1.RELEASE' }
    repositories { mavenCentral() 
		jcenter() 	
	maven {
		url "https://plugins.gradle.org/m2/"
	  }}
	dependencies { classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath 'net.nemerosa:versioning:2.0.0'
		//classpath "gradle.plugin.at.karriere.gradle.plugins:karriere-version:1.3.0"

	}
}

/*plugins {
	id 'com.palantir.git-version' version '0.4.0'
}*/

apply plugin: 'eclipse'
//apply plugin: 'groovy'
apply plugin: 'spring-boot'
apply plugin: 'application'
//apply plugin: "at.karriere.version"
apply plugin: 'net.nemerosa.versioning'

mainClassName = "Test.Test"

jar {
    baseName = 'demo'
	//version = '0.0.1-SNAPSHOT'
	version=versioning.info.full
}

repositories { mavenCentral() }

configurations { providedRuntime }
configurations.all{
    exclude group:'javax.servlet', module :'servlet-api'
}
springBoot { executable = true }
dependencies {
        
    //providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
	}

task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}

versioning {
   /**
    * Defines the SCM to use in order to collect information.
    *
    * At the moment, only Git (git) and Subversion (svn) are supported.
    */
   scm = 'git'
   /**
    * Computation of the release type and the base, by parsing the scm info.
    * By default, we use "/" as a separator in branch name between the type and the base. If not
    * present, the type is the branch and the base is empty.
    * F.e. if you want use tag name instead of branch you may provide something like:
    */
    releaseParser = { scmInfo, separator = '/' -> ->
        List<String> part = scmInfo.tag.split('/') + ''
        new net.nemerosa.versioning.ReleaseInfo(type: part[0], base: part[1])
    }
    /**
     * Fetch branch name from environment variables. Useful when using CI like
     * Travis or Jenkins.
     */
    branchEnv = ['TRAVIS_BRANCH', 'GIT_BRANCH', 'SVN_BRANCH', 'BRANCH_NAME']
    /**
     * Computation of the full version
     */
    full = { scmInfo -> "${scmInfo.branch}-${scmInfo.abbreviated}" }
    /**
     * Set of eligible branch types for computing a display version from the branch base name
     */
    releases = ['release']
}

